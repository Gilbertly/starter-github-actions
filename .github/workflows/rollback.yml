name: rollbackDeployment

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '14'

jobs:
  StagingPreviousDeployments:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'RollbackStaging'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org

      - name: Restore & cache dependencies
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('package-lock.json') }}
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm i --no-package-lock && npm i shelljs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch previous staging deployments
        id: fetchPreviousDeployments
        run: |
          SLS_DEBUG=* && $(npm bin)/sls deploy -s staging list 2>&1 | tee deployments.log
          echo "::set-output name=previousDeployments::$(cat deployments.log)\n"

      - name: Comment on Issue
        uses: actions/github-script@v5
        # const deployments = shell.exec('$(npm bin)/sls deploy -s staging list').stdout;
        with:
          script: |
            const shell = require('shelljs');
            const deployments = shell.exec('cat deployments.log').stdout;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Previous deployments:\n${deployments}`,
            })

  RollbackStaging:
    runs-on: ubuntu-latest
    if: ${{ !github.event.issue.pull_request && contains(github.event.comment.body, '/rollback')}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Get rollback timestamp
        uses: actions/github-script@v5
        id: rollback-timestamp
        with:
          result-encoding: string
          script: |
            const commentBody = context.payload.comment.body;
            const rollbackTimestamp = commentBody.split('/rollback ')[1];

            if (rollbackTimestamp.indexOf(' ') >= 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Invalid rollback parameter input: ${commentBody}`,
              });

              github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: "eyes",
              });
              return '';
            } else {
              github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: "+1",
              });
              return rollbackTimestamp;
            }

      - name: Rollback staging deployment
        if: ${{steps.rollback-timestamp.outputs.result != ''}}
        run: echo "Rolling back to timestamp - ${{steps.rollback-timestamp.outputs.result != ''}}"

      - name: Comment on Issue
        uses: actions/github-script@v5
        if: ${{steps.rollback-timestamp.outputs.result != ''}}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Successfully rolled-back previous `staging` deployment with timestamp `${{steps.rollback-timestamp.outputs.result}}`',
            })

  # ProdPreviousDeployments:
  #   runs-on: ubuntu-latest
  #   if: github.event.label.name == 'RollbackProd'
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1

  #     - name: Echo message - Fetch previous prod deployments
  #       run: echo "Fetch previous prod deployments ..."

  #     - name: Comment on Issue
  #       uses: actions/github-script@v5
  #       with:
  #         script: |
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: 'Previous `prod` deployments:',
  #           })

  # RollbackDeployment:
  #   runs-on: ubuntu-latest
  #   if: ${{ !github.event.issue.pull_request && contains(github.event.comment.body, '/rollback')}}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1

  #     - name: Get rollback timestamp
  #       uses: actions/github-script@v5
  #       id: rollback
  #       with:
  #         script: |
  #           const commentBody = context.payload.comment.body;
  #           const rollbackInput = commentBody.split('/rollback ')[1];
  #           const rollbackStage = rollbackInput.split(' ')[0].toLowerCase();
  #           const rollbackTimestamp = rollbackInput.split(' ')[1];

  #           if (['prod', 'staging'].includes(rollbackStage)) {
  #             github.rest.reactions.createForIssueComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: context.payload.comment.id,
  #               content: '+1',
  #             });
  #             return { rollbackStage, rollbackTimestamp };
  #           } else {
  #             github.rest.issues.createComment({
  #               issue_number: context.issue.number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               body: `Invalid rollback parameter inputs: ${commentBody}`,
  #             });

  #             github.rest.reactions.createForIssueComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: context.payload.comment.id,
  #               content: 'eyes',
  #             });
  #             return;
  #           }

  #     - name: Echo message - Fetch previous staging deployments
  #       if: ${{steps.rollback.outputs.result}}
  #       run: echo "Rolling back to timestamp - ${{steps.rollback.outputs.result.rollbackTimestamp}}"

  #     - name: Comment on Issue
  #       uses: actions/github-script@v5
  #       if: ${{steps.rollback.outputs.result}}
  #       with:
  #         script: |
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: 'Successfully rolled-back previous `staging` deployment with timestamp `${{steps.rollback.outputs.result.rollbackTimestamp}}`',
  #           })

# comment deployment lists available

# get user input

# if prod, wait approval
