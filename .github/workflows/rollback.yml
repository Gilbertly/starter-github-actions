name: rollbackDeployment

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  StagingPreviousDeployments:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'RollbackStaging'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Fetch previous staging deployments
        id: fetchPreviousDeployments
        run: echo "::set-output name=previousDeployments::$(serverless deploy -s staging list)\n"

      - name: Comment on Issue
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.fetchPreviousDeployments.outputs.previousDeployments }}',
            })

  RollbackStaging:
    runs-on: ubuntu-latest
    if: ${{ !github.event.issue.pull_request && contains(github.event.comment.body, '/rollback')}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Get rollback timestamp
        uses: actions/github-script@v5
        id: rollback-timestamp
        with:
          result-encoding: string
          script: |
            const commentBody = context.payload.comment.body;
            const rollbackTimestamp = commentBody.split('/rollback ')[1];

            if (rollbackTimestamp.indexOf(' ') >= 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Invalid rollback parameter input: ${commentBody}`,
              });

              github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: "eyes",
              });
              return '';
            } else {
              github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: "+1",
              });
              return rollbackTimestamp;
            }

      - name: Echo message - Fetch previous staging deployments
        if: ${{steps.rollback-timestamp.outputs.result != ''}}
        run: echo "Rolling back to timestamp - ${{steps.rollback-timestamp.outputs.result != ''}}"

      - name: Comment on Issue
        uses: actions/github-script@v5
        if: ${{steps.rollback-timestamp.outputs.result != ''}}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Successfully rolled-back previous `staging` deployment with timestamp `${{steps.rollback-timestamp.outputs.result}}`',
            })

  # ProdPreviousDeployments:
  #   runs-on: ubuntu-latest
  #   if: github.event.label.name == 'RollbackProd'
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1

  #     - name: Echo message - Fetch previous prod deployments
  #       run: echo "Fetch previous prod deployments ..."

  #     - name: Comment on Issue
  #       uses: actions/github-script@v5
  #       with:
  #         script: |
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: 'Previous `prod` deployments:',
  #           })

  # RollbackDeployment:
  #   runs-on: ubuntu-latest
  #   if: ${{ !github.event.issue.pull_request && contains(github.event.comment.body, '/rollback')}}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1

  #     - name: Get rollback timestamp
  #       uses: actions/github-script@v5
  #       id: rollback
  #       with:
  #         script: |
  #           const commentBody = context.payload.comment.body;
  #           const rollbackInput = commentBody.split('/rollback ')[1];
  #           const rollbackStage = rollbackInput.split(' ')[0].toLowerCase();
  #           const rollbackTimestamp = rollbackInput.split(' ')[1];

  #           if (['prod', 'staging'].includes(rollbackStage)) {
  #             github.rest.reactions.createForIssueComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: context.payload.comment.id,
  #               content: '+1',
  #             });
  #             return { rollbackStage, rollbackTimestamp };
  #           } else {
  #             github.rest.issues.createComment({
  #               issue_number: context.issue.number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               body: `Invalid rollback parameter inputs: ${commentBody}`,
  #             });

  #             github.rest.reactions.createForIssueComment({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               comment_id: context.payload.comment.id,
  #               content: 'eyes',
  #             });
  #             return;
  #           }

  #     - name: Echo message - Fetch previous staging deployments
  #       if: ${{steps.rollback.outputs.result}}
  #       run: echo "Rolling back to timestamp - ${{steps.rollback.outputs.result.rollbackTimestamp}}"

  #     - name: Comment on Issue
  #       uses: actions/github-script@v5
  #       if: ${{steps.rollback.outputs.result}}
  #       with:
  #         script: |
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: 'Successfully rolled-back previous `staging` deployment with timestamp `${{steps.rollback.outputs.result.rollbackTimestamp}}`',
  #           })

# comment deployment lists available

# get user input

# if prod, wait approval
